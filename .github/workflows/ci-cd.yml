name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build with Maven
      - name: Build with Maven
        run: mvn clean install

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Google Artifact Registry
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast2-docker.pkg.dev

      # Build, tag, and push Docker image
      - name: Build and push warehouse-service
        run: |
          docker tag com.nvlhnn/warehouse.service:1.0-SNAPSHOT asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/warehouse.service:1.0-SNAPSHOT
          docker push asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/warehouse.service:1.0-SNAPSHOT

      - name: Build and push order-service
        run: |
          docker tag com.nvlhnn/order.service:1.0-SNAPSHOT asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/order.service:1.0-SNAPSHOT
          docker push asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/order.service:1.0-SNAPSHOT

      - name: Build and push user-service
        run: |
          docker tag com.nvlhnn/user.service:1.0-SNAPSHOT asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/user.service:1.0-SNAPSHOT
          docker push asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/user.service:1.0-SNAPSHOT

      - name: Build and push product-service
        run: |
          docker tag com.nvlhnn/product.service:1.0-SNAPSHOT asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/product.service:1.0-SNAPSHOT
          docker push asia-southeast2-docker.pkg.dev/multiwarehouse-449808/com-multiwarehouse-app-repository/product.service:1.0-SNAPSHOT

    outputs:
      image-sha: ${{ github.sha }}

  deploy:
    name: Deploy to GKE
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up Gcloud SDK
      - name: Set up Gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'kubectl'

      # 4. Get GKE Credentials
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Kubernetes Secrets db
        run: |
          kubectl create secret generic db-secrets \
            --from-literal=ORDER_DB_URL=${{ secrets.ORDER_DB_URL }} \
            --from-literal=WAREHOUSE_DB_URL=${{ secrets.WAREHOUSE_DB_URL }} \
            --from-literal=USER_DB_URL=${{ secrets.USER_DB_URL }} \
            --from-literal=PRODUCT_DB_URL=${{ secrets.PRODUCT_DB_URL }} \
            --from-literal=SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes Secrets app
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=XENDIT_SECRET=${{ secrets.XENDIT_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # Apply Kubernetes manifests
      - name: Apply Kubernetes Manifests
        run: |
          cd infrastructure/kubernetes/
          kubectl replace -f application-deployment-git-runner.yml